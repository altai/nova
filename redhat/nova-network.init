#!/bin/bash

#
# nova-network	OpenStack Nova Network Controller
#
# chkconfig: 2345 96 04
# description: The Network Controller manages the networking resources \
#              on host machines. The API server dispatches commands    \
#              through the message queue, which are subsequently       \
#              processed by Network Controllers.                       \
#              Specific operations include:                            \
#              * Allocate Fixed IP Addresses                           \
#              * Configuring VLANs for projects                        \
#              * Configuring networks for compute nodes                \
#
# config: /etc/nova/nova.conf
# pidfile: /var/run/nova/nova-network.pid

### BEGIN INIT INFO
# Provides: nova-network
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 3 4 5
# Default-Stop: 0 2 1 6
# Short-Description: OpenStack Nova Network Controller
# Description: The Network Controller manages the networking resources
#              on host machines. The API server dispatches commands
#              through the message queue, which are subsequently
#              processed by Network Controllers.
#              Specific operations include:
#              * Allocate Fixed IP Addresses
#              * Configuring VLANs for projects
#              * Configuring networks for compute nodes
### END INIT INFO

# Source function library.
. /etc/init.d/functions

prog="OpenStack Nova Network Controller"
suffix="network"
flgfile=/etc/nova/nova.conf
logfile=/var/log/nova/nova-$suffix.log
pidfile=/var/run/nova/nova-$suffix.pid
lockfile=/var/lock/subsys/nova-$suffix
binfile=/usr/bin/nova-$suffix
daemonuser=nova

start() {
    echo -n "Starting $prog: "
    start-stop-daemon --start --oknodo --background --chuid $daemonuser --make-pidfile --pidfile $pidfile --startas $binfile --
    retval=$?
    [ $retval -eq 0 ] && success || failure
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n "Stopping $prog: "
    start-stop-daemon --stop --oknodo --pidfile $pidfile
    retval=$?
    [ $retval -eq 0 ] && success || failure
    echo
    [ $retval -eq 0 ] && rm -f $lockfile $pidfile
    return $?
}

rh_status() {
    status -p $pidfile $binfile
}

restart() {
    stop
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        rh_status
        ;;
    restart)
        restart
        ;;
    condrestart|try-restart)
        [ -f $lockfile ] && restart
        ;;
    *)
        echo "Usage: service $(basename $0) {start|stop|status|restart|condrestart|try-restart}"
        exit 1
        ;;
esac

exit $?
